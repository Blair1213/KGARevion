import re
import json
from src.promptTemplate import modification_prompt_template


class Revise(object):
    def __init__(self, llm) -> None:
        super().__init__()
        self.class_name = 'Modify generated triples by LLM'
        self.class_desc = 'Using this action to modify triples generated by LLM'
        self.llm = llm
    
    def check_triplets(self, keys_text):
        try:
            pattern = r"\{(.*?)\}"
            matches = re.findall(pattern, keys_text.replace("\n", ""))

            if not matches:
                raise ValueError("No triplets returned by the model.")
            
            new_match = matches[0].replace('(', '[').replace(')', ']').replace('\'','\"') ##remove ( and ), since they cannot be converted to dict by json.loads

            #print(new_match)
            
            if new_match[0] == '[':
                new_match = "Revised_Triplets :" + new_match
            keys_dict = json.loads("{" + new_match + "}")

            if "Revised_Triplets" not in keys_dict or not keys_dict["Revised_Triplets"]:
                raise ValueError("Model did not return expected 'triplets' key.")
        except Exception as e:
            return ""
        
        keys_dict['Revised_Triplets'] = list(keys_dict['Revised_Triplets'])
        triplets = list(keys_dict["Revised_Triplets"])

        return str(triplets)
    
    def call(self, history, query):
        triplets = str(history).replace('[', '(').replace(']', ')')
        prompt = modification_prompt_template.replace('{t}', triplets).replace('{q}', query)

        output = self.llm.generate(prompt, new_tokens_num=256)

        modified_triples = self.check_triplets(output)

        if modified_triples == "" or len(modified_triples) == 0:
            return "Cannot find triplets"
        else:
            return modified_triples